#include <cmath>
#include <cstdio>

/* Problem:
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    2^2=4,  2^3=8,   2^4=16,  2^5=32
    3^2=9,  3^3=27,  3^4=81,  3^5=243
    4^2=16, 4^3=64,  4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/

/* Solution:
 * The question doesn't require calculating the powers, only finding which are distinct.
 * So the question is really: how many numbers are powers of powers?
 * 
 * Using the power rule:
 * 4^b = 2^(2b) when 2b < lim
 * 8^b = 4^(3b/2) when 3b/2 < lim or 2^(3b/1) when 3b/1 < lim
 * 16^b = 8^(4b/3) or 4^(4b/2) or 2^(4b/1)
 * (We never use a fractional exponent, so it's only a duplicate when b % n == 0)
 *
 * When a power is less than the limit, go through all the duplicates as described above
 * Use a 2d array to store the results, in the format arr[base][exponent] = true if duplicate.
 */

#define lim 100

int main()
{
	int count = 0;
	int base_lim = 2;
	int exponent_lim = 2; 
	bool duplicates[lim+1][lim+1]; 

	// find the largest base (10^2) and power (2^7) less than lim
	for (; (base_lim*base_lim) <= lim; base_lim++);
	for (int n = 2; (n *= 2) <= lim; exponent_lim++);

	// zero out the duplicates
	for (int i = 0; i <= lim; i++) for (int j = 0; j <= lim; j++)
		duplicates[i][j] = false;

	for (int a = 2; a <= lim; a++) for (int b = 2; b <= lim; b++)
	{
		if (! duplicates[a][b])
			count++;

		if (a >= base_lim || b >= exponent_lim) continue;
		unsigned int c = pow(a, b);
		if (!c || c > lim) continue;

		// c^d is a duplicate of a^(b-n)^(d * b / (b-n))
		// i.e. 64^25 = 2^5^(25 * 6 / 5) = 32^30
		for (int n = b-1; n > 0; n--) 
			for (int d = b-n > 2 ? b-n : 2; d * b / (b-n) <= lim; d+=(b-n))
			duplicates[c][d] = true;
	}
	printf("%d\n", count);
	return 0;
}
